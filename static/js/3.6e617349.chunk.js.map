{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","loginInputNameId","loginInputNamberId","useState","name","setName","handleChangeName","useCallback","event","target","number","setNumber","handleChangeNumber","items","useSelector","getItems","handleSubmit","preventDefault","some","contact","alert","addContact","className","onSubmit","s","formContact","htmlFor","formNameTitle","formNameInput","type","pattern","title","required","onChange","button","ContactList","children","list","ContactItem","contactsItems","getFilteredContactList","map","item","itemName","onClick","deleteContact","onDelete","Filter","getFilterValue","changeFilter","ContactsView","useEffect","fetchContacts"],"mappings":"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","file":"static/js/3.6e617349.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContact\":\"ContactForm_formContact__qP6MQ\",\"formNameTitle\":\"ContactForm_formNameTitle__3lOXl\",\"formNameInput\":\"ContactForm_formNameInput__1SVFN\",\"button\":\"ContactForm_button__3P_Uv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__BjkWz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__2IkYR\",\"itemName\":\"ContactItem_itemName__1OT14\",\"button\":\"ContactItem_button__3L7hf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formNameTitle\":\"Filter_formNameTitle__219Nd\",\"formNameInput\":\"Filter_formNameInput__b_Vds\"};","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useState, useCallback } from 'react';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { addContact, getItems } from '../../redux/contacts';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css'\n\nexport default function ContactForm () {\n  \n  const dispatch = useDispatch();\n  const loginInputNameId = nanoid();\n  const loginInputNamberId = nanoid();\n  \n  const [name, setName] = useState('');\n  const handleChangeName = useCallback(event => {\n    setName(event.target.value);\n  }, []);\n\n  const [number, setNumber] = useState('');\n  const handleChangeNumber = useCallback(event => {\n    setNumber(event.target.value);\n  }, []);\n\n  const items = useSelector(getItems);\n\n  const handleSubmit = useCallback(\n    event => {\n      event.preventDefault();\n      const addInputValue = contact => contact.name === name || contact.number === number;\n\n      if (items.some(addInputValue)) {\n        alert(`Contact is already in contacts`);\n        return;\n      }\n\n      dispatch(addContact({ name, number }));\n\n      setName('');\n      setNumber('');\n    },\n    [dispatch, items, name, number],\n  );\n  \n  return (\n    <section className=\"sectionFormContacts\">\n      <form onSubmit={handleSubmit} className={s.formContact}>\n        <label htmlFor={loginInputNameId} className={s.formNameTitle}>Name</label>\n          \n        <input\n          className={s.formNameInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          id = {loginInputNameId}\n          value={name}\n          onChange = {handleChangeName}\n                \n        />\n        \n\n        <label htmlFor={loginInputNamberId} className={s.formNameTitle}>Number</label>\n          \n        <input\n          className={s.formNameInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          id = {loginInputNamberId}\n          value={number}\n          onChange = {handleChangeNumber}\n        />\n        \n                  \n        <button type=\"submit\" className={s.button}>Add contact</button>\n      </form>\n    </section>\n\n  )\n  \n}\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ children }) => (\n  <ul className={s.list}>{children}</ul>\n);\n\nContactList.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default ContactList;\n\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, getFilteredContactList } from '../../redux/contacts';\nimport s from './ContactItem.module.css';\n\nexport default function ContactItem() {\n\n  const dispatch = useDispatch();\n  const contactsItems = useSelector(getFilteredContactList);\n  const onDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <>\n      {contactsItems.map(({ id, name, number }) => {\n        return (\n          <li key={id} className=\"liContactsItems\" className={s.item}>\n            <p className={s.itemName}>{`${name}: ${number}`}</p>\n            <button type=\"button\" onClick={() => onDelete(id)} className={s.button}>\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </>\n  );\n}\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDelete: PropTypes.func,\n};\n","import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter, getFilterValue } from '../../redux/contacts';\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n\n  const dispatch = useDispatch();\n  const value = useSelector(getFilterValue);\n  const onChange = useCallback(\n    event => dispatch(changeFilter(event.target.value)),\n    [dispatch],\n  );  \n\n  return (\n    <label className={s.formNameTitle}>\n      Find contacts by name\n      <div >\n        <input type=\"text\" value={value} onChange={onChange} className={s.formNameInput}></input>\n      </div>\n    \n    </label>\n  );\n\n}\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ContactForm from '../components/ContactForm'\nimport ContactList from '../components/ContactList'\nimport ContactItem from '../components/ContactItem';\nimport Filter from '../components/Filter'\n\nimport { fetchContacts } from '../redux/contacts/contacts-operations';\nimport { getItems } from '../redux/contacts/contacts-selectors';\n\nexport default function ContactsView () {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const items = useSelector(getItems);\n  return (\n    <>\n      <h1 className=\"titleContacts\">Phonebook</h1>\n      <ContactForm/>\n      <h2>Contacts</h2>\n  \n      {items.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList>\n            <ContactItem />\n          </ContactList>\n        </>\n      ) : (\n        <span>You have no contacts!</span>\n      )}\n    </>\n  )\n\n};\n"],"sourceRoot":""}